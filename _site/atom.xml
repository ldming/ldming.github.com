<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>NiceDay</title>
 <link href="http://ldming.github.io/" rel="self"/>
 <link href="http://ldming.github.io"/>
 <updated>2016-02-03T17:40:26+08:00</updated>
 <id>http://ldming.github.io</id>
 <author>
   <name>Domain</name>
   <email>L.Dongming(#)foxmail.com</email>
 </author>

 
 <entry>
   <title>Ceph install document</title>
   <link href="http://ldming.github.io/2015/03/12/ceph-install-document"/>
   <updated>2015-03-12T00:00:00+08:00</updated>
   <id>http://ldming.github.io/2015/03/12/ceph-install-document</id>
   <content type="html">
&lt;p&gt;Ceph是一个基于对象的分布式文件存储系统，我们将其用于Totem对象代理数据库管理系统的底层数据存储。&lt;/p&gt;

&lt;p&gt;Ceph集群包括四种类型的节点，client、Monitor、MDS和OSD，其中client对系统发出请求，Mon节点负责维护集群状态，包括monitor map、OSD map、pg map和crush map等，所有状态的变更都被记录；osd节点负责存储数据，数据复制，恢复，均衡，提供监控数据等；mds是可选组件，管理元数据，只有在使用ceph文件系统时才需要用到，负责userspace接口。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;安装环境&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;操作系统：Ubuntu14.04 64位&lt;/li&gt;
  &lt;li&gt;CPU：Intel 酷睿双核 1.8GHZ&lt;/li&gt;
  &lt;li&gt;硬盘：120GB&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;编译安装&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装依赖包，如下：&lt;/p&gt;

 	apt-get install autotools-dev autoconf automake cdbs g++ gcc git libatomic-ops-dev libboost-dev libcrypto++-dev libcrypto++ libedit-dev libexpat1-dev libfcgi-dev libfuse-dev libgoogle-perftools-dev libgtkmm-2.4-dev libtool pkg-config uuid-dev libkeyutils-dev uuid-dev libkeyutils-dev  btrfs-tools libblkid-dev libudev-dev libsnappy-dev libleveldb-dev libboost-thread-dev  libboost-program-options-dev libaio-dev
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;./autogen.sh&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;./configure --without-xfs&lt;/code&gt;（此时如果还提示缺包，则安装指定的包，继续执行这一步，直到成功）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;sudo make&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;sudo make install&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-2&quot;&gt;目录结构&lt;/h2&gt;

&lt;p&gt;安装完成后，默认的安装目录在 &lt;code&gt;/usr/local/&lt;/code&gt; 目录下，分别对应如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;/usr/local/bin&lt;/code&gt; 所有可执行文件包括需要用到的工具，共33个&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/usr/local/etc/ceph/&lt;/code&gt; 配置文件放置在目录下，包括两个配置文件 &lt;code&gt;ceph.conf&lt;/code&gt; 和 &lt;code&gt;fetch_config&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/usr/local/share/doc/ceph/&lt;/code&gt; 该目录下有两个配置文件样本，我们的配置文件需要从此处拷贝&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/usr/local/lib&lt;/code&gt; 存放所有的动态加载库文件&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/var/lib/ceph/&lt;/code&gt; 存放ceph相关组件的目录，包括Mon节点、OSD节点等的信息&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/etc/ceph/ceph.conf&lt;/code&gt; 在etc目录下还会存放一个ceph配置文件，其用途随后介绍&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mon&quot;&gt;部署Mon节点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;创建配置文件目录,与监控节点相关的信息保存在该目录下，需要在每个监控节点都创建该目录&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo mkdir –p /var/lib/ceph/mon&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用uuidgen命令生成一个fsid，用来唯一标识一个cluster，如果产生的uuid为f649b128-963c-4802-ae17-5a76f36c4c76，则在ceph.conf中对应的配置参数如下：&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;fsid = f649b128-963c-4802-ae17-5a76f36c4c76	&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;选择合适的集群名，例如集群名为ceph，则配置文件名为ceph.conf (这里集群名与配置文件名是对应的)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;确定监控节点的名字&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;hostname –s&lt;/code&gt; #节点名为ceph1&lt;/p&gt;

    &lt;p&gt;IP为	&lt;code&gt;192.168.1.94&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;则对应配置文件中的参数为：&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;mon initial members = ceph1&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;mon host = ceph1&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;mon addr = 192.168.1.94&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为集群创建一个keyring，并产生一个monitor密钥（secret key）&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph-authtool --create-keyring /tmp/ceph.mon.keyring --gen-key -n mon. --cap mon &#39;allow *&#39;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;产生一个管理员keyring，产生一个client.admin用户，并为该用户添加一个keyring&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  ceph-authtool --create-keyring /etc/ceph/ceph.client.admin.keyring --gen-key -n client.admin --set-uid=0 --cap mon &#39;allow *&#39; --cap osd &#39;allow *&#39; --cap mds &#39;allow&#39;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将client.admin的key添加至ceph.mon.keyring&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph-authtool /tmp/ceph.mon.keyring --import-keyring /etc/ceph/ceph.client.admin.keyring&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用hostnames、host IP和fsid，产生一个monitor map，将其保存至/tmp/monmap&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  monmaptool --create --add  ceph1 192.168.1.94  --fsid f649b128-963c-4802-ae17-5a76f36c4c76  /tmp/monmap 
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;(如果有多个mon节点，则可以同时写多个节点的信息，类似&lt;code&gt;--add mon2 192.168.1.90 –add mon3 192.168.1.91&lt;/code&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建监控节点数据目录&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo mkdir /var/lib/ceph/mon/{cluster-name}-{hostname}&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo mkdir /var/lib/ceph/mon/ceph-ceph1&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用前面创建的监控和管理key，以及map数据，写入数据目录&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo ceph-mon --mkfs -i ceph1 --monmap /tmp/monmap --keyring /tmp/ceph.mon.keyring&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后的ceph.conf内容类似如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  [global]
  fsid = f649b128-963c-4802-ae17-5a76f36c4c76
   	public network = 192.168.1.0/24
   	cluster network = 192.168.1.0/24
  pid file = /var/run/ceph/$name.pid
  auth client required = cephx
  auth service required = cephx
  auth cluster required = cephx
 
  [mon]
  mon initial members = ceph1
  mon host = ceph1
  mon addr = 192.168.1.94
  mon data = /var/lib/ceph/mon/$cluster-$id

  [mon.ceph1]
  host = cehp1
  mon addr = 192.168.1.94
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建done文件，用于标识monitor已经创建并且准备好开始&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo touch /var/lib/ceph/mon/ceph-ceph1/done&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动该Mon节点&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo /etc/init.d/ceph start ceph.ceph1&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果要使该守护进程每次开机都启动，我们必须创建一个空的文件，如下：&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo touch /var/lib/ceph/mon/ceph-ceph1/upstart&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;注意：&lt;/h3&gt;
&lt;p&gt;在调用&lt;code&gt;/etc/init.d/ceph start mon.ceph1&lt;/code&gt;启动&lt;code&gt;mon.ceph1&lt;/code&gt;时会读取&lt;code&gt;/usr/local/etc/ceph/ceph.conf&lt;/code&gt;这个配置文件，获取关于mon节点的一些信息，但是在使用&lt;code&gt;sudo ceph –s&lt;/code&gt;这个命令时，同样也会读取配置文件，但此时读取配置文件却不是在&lt;code&gt;/usr/local/etc/ceph&lt;/code&gt;这个目录下，而是在&lt;code&gt;/etc/ceph&lt;/code&gt;这个目录下，因此我们需要将配置文件拷贝至该目录下一份，否则会报错，其提示如下：&lt;code&gt;Error initializing cluster client： Error&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;但是如果只有&lt;code&gt;/etc/ceph&lt;/code&gt;下的配置文件，而没有&lt;code&gt;/usr/local/etc/ceph&lt;/code&gt;下的配置文件，则在启动&lt;code&gt;mon.ceph1&lt;/code&gt;时会提示该目录下没有找到对应的&lt;code&gt;ceph.conf&lt;/code&gt;，个人猜想它们查找配置文件的目录应该是可以调整的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;此时，如果配置成功的话，执行&lt;code&gt;ceph –s&lt;/code&gt; 应该会输出类似以下的信息:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cluster f649b128-963c-4802-ae17-5a76f36c4c76
     health HEALTH_ERR 64 pgs stuck inactive; 64 pgs stuck unclean; no osds
     monmap e1: 1 ceph1 at {ceph1=192.168.1.94:6789/0}, election epoch 1, quorum 0 ceph1
     osdmap e22: 0 osds: 0 up, 0 in
      pgmap v69: 64 pgs, 1 pools, 0 bytes data, 0 objects
            0 kB used, 0 kB / 0 kB avail
                  64 creating
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;osd&quot;&gt;部署OSD节点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;将key文件和ceph.conf拷贝至osd节点中，没有key则无法通讯&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;scp ceph.conf ceph.client.admin.keyring 192.168.1.95:/etc/ceph&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;此时，在每台机器上创建osd，需要使用一个uuid，执行以下命令uuidgen产生一个uuid&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph osd create {uuid}&lt;/code&gt; 产生一个osd-number 0,1,2等，表示该osd-number=0,1,2等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建OSD数据目录&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

 	&lt;code&gt;mkdir /var/lib/ceph/osd/ceph-0&lt;/code&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;创建文件系统，并将其挂在至相应的数据目录&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo mkfs -t {fstype} /dev/{hdd}&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo mount -o user_xattr /dev/{hdd} /var/lib/ceph/osd/ceph-{osd-number}&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;这里的&lt;code&gt;/dev/{hdd}&lt;/code&gt;可以是磁盘分区，也可以是磁盘的逻辑分区（LVM）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;初始化数据目录&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo ceph-osd -i {osd-num} --mkfs --mkkey --osd-uuid [{uuid}] --cluster {cluster_name}&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;注意这里需要用到我们之前创建的uuid&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;注册osd认证key&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph auth add osd.0 osd &#39;allow *&#39; mon &#39;allow profile osd&#39; -i /var/lib/ceph/osd/ceph-0/keyring&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加ceph node至crush map&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph osd crush add-bucket osd1 host&lt;/code&gt; 这里的osd1为主机名&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加ceph node至default root&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph osd crush move osd1 root=default&lt;/code&gt; 这里的osd1为主机名&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加osd至crush map&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph osd crush add osd.{osd_num}|{id-or-name} {weight} [{bucket-type}={bucket-name} ...]&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph osd crush add osd.0 1.0 host=osd1&lt;/code&gt; 这里的osd1为主机名&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动osd服务&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo /etc/init.d/ceph start osd.0&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加服务 在每个	&lt;code&gt;/var/lib/ceph/osd/ceph-number&lt;/code&gt; 目录下添加空白文件sysvinit&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后，通过&lt;code&gt;ceph –s&lt;/code&gt; 查看集群状态&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  cluster b24d2b17-28f2-419a-923d-e05332e2ea58
       health HEALTH_WARN 32 pgs degraded; 32 pgs stuck degraded; 64 pgs stuck unclean; 32 pgs stuck undersized; 32 pgs undersized; too few pgs per osd (8 &amp;lt; min 20)
       monmap e1: 1 mons at {ceph1=192.168.1.94:6789/0}, election epoch 2, quorum 0 ceph1
       osdmap e51: 8 osds: 8 up, 8 in
        pgmap v105: 64 pgs, 1 pools, 0 bytes data, 0 objects
              8550 MB used, 140 GB / 156 GB avail
                    32 active+undersized+degraded
                    32 active+remapped
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;这里有一个警告: too few pgs per osd, 因此我们需要修改 &lt;code&gt;pg_num&lt;/code&gt; , &lt;code&gt;pgp_num&lt;/code&gt; 的数值如下:&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph osd pool set rbd pg_num 266&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph osd pool set rbd pgp_num 266&lt;/code&gt;&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  cluster b24d2b17-28f2-419a-923d-e05332e2ea58
   health HEALTH_OK
   monmap e3: 1 mons at {ceph1=192.168.1.94:6789/0}, election epoch 1, quorum 0 ceph1
   mdsmap e2: 0/0/1 up
   osdmap e922: 8 osds: 8 up, 8 in
    pgmap v1788: 532 pgs, 2 pools, 0 bytes data, 0 objects
          8754 MB used, 139 GB / 156 GB avail
               532 active+clean
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过 &lt;code&gt;ceph osd tree&lt;/code&gt; 查看osd节点的状态&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  # id	weight	type name	up/down	reweight
  -1	8	root default
  -2	4		host ceph1
  0	1			osd.0	up	1	
  1	1			osd.1	up	1	
  2	1			osd.2	up	1	
  3	1			osd.3	up	1	
  -3	4		host ceph2
  4	1			osd.4	up	1	
  5	1			osd.5	up	1	
  6	1			osd.6	up	1	
  7	1			osd.7	up	1	
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mds-server&quot;&gt;部署MDS Server&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Edit &lt;code&gt;/usr/local/etc/ceph/ceph.conf&lt;/code&gt; and add a MDS section like so:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  [mds]
      mds data = /var/lib/ceph/mds/$name
      keyring = /var/lib/ceph/mds/$name/keyring
    
  [mds.0]
      host = ceph1
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create the authentication key(only if you use cephX)&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;mkdir /var/lib/ceph/mds/mds.0&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph-authtool -–create-keyring -–gen-key -n mds.0 /var/lib/ceph/mds/mds.0/keyring&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the capabilities to that keyring. Also ran as root:&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph auth add mds.0 osd ‘allow *’ mon ‘allow rwx’ mds ‘allow’ -i /var/lib/ceph/mds/mds.0/keyring&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start the service&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;/etc/init.d/ceph start mds.0&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果我们修改了Mon所在主机的IP，通过以下方法修改Mon节点的信息&lt;/p&gt;

    &lt;p&gt;1.修改ceph.conf中与Mon相关的IP信息
  2.&lt;code&gt;monmaptool --create --add ceph1 192.168.191.2 --fsid b24d2b17-28f2-419a-923d-e05332e2ea58 /tmp/monmap&lt;/code&gt;
  3.&lt;code&gt;ceph-mon --inject-monmap /tmp/monmap --mon-data /var/lib/ceph/mon/ceph-ceph1/&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-a-ceph-filesystem&quot;&gt;Create a Ceph Filesystem&lt;/h2&gt;

&lt;p&gt;A Ceph filesystem requires at least two RADOS pools, one for data and one for metadata.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create data pool&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph osd pool create cephfs_data 266&lt;/code&gt;  # 266 is the pg_num&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create metadata pool&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph osd pool create cephfs_metadata 266&lt;/code&gt; # 266 is the pg_num&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create filesystem&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;ceph fs new &amp;lt;fs_name&amp;gt; &amp;lt;metadata&amp;gt; &amp;lt;data&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`ceph fs new cephfs cephfs_metadata cephfs_data`
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Mount ceph fs&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo mkdir /mnt/cephfs&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo mount -t ceph 192.168.1.1:6789:/ /mnt/cephfs&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To mount the Ceph file system with &lt;code&gt;cephx&lt;/code&gt; authentication enabled, you must specify a suer name and a secret.&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;sudo mount -t ceph 192.168.1.1:6789:/ /mnt/cephfs -o name=admin, secret=AQBOAKVUuKA3CxAAM6+hk7n/8rTJTi5gwoG20w==&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;参考文献：&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;添加或移除mon节点，参考&lt;a href=&quot;http://docs.ceph.com/docs/master/rados/operations/add-or-rm-mons/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加或移除osd节点，参考&lt;a href=&quot;http://docs.ceph.com/docs/master/rados/operations/add-or-rm-osds/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;手动部署Ceph手册：http://ceph.com/docs/master/install/manual-deployment/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;德哥安装osd过程：http://blog.163.com/digoal@126/blog/static/163877040201411141846487/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;德哥安装Mon过程：http://blog.163.com/digoal@126/blog/static/163877040201410274232276/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;部署MDS过程：&lt;/p&gt;

    &lt;p&gt;www.sebastien-han.fr/blog/2013/05/13/deploy-a-ceph-mds-server&lt;/p&gt;

    &lt;p&gt;https://davespano.wordpress.com/2012/10/17/adding-an-mds-server-to-your-ceph-cluster/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;整个部署过程以及遇到的问题：&lt;/p&gt;

    &lt;p&gt;http://blog.zhaw.ch/icclab/deploy-ceph-and-start-using-it-end-to-end-tutorial-installation-part-13/&lt;/p&gt;

    &lt;p&gt;http://blog.zhaw.ch/icclab/deploy-ceph-troubleshooting-part-23/&lt;/p&gt;

    &lt;p&gt;http://blog.zhaw.ch/icclab/deploy-ceph-librados-client-part-33/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ceph Osd Reweight： http://cephnotes.ksperis.com/blog/2013/12/09/ceph-osd-reweight&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;http://www.admin-magazine.com/HPC/Articles/Ceph-Maintenance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可能遇到的问题：&lt;/p&gt;

    &lt;p&gt;http://ceph.com/docs/master/rados/troubleshooting/&lt;/p&gt;

    &lt;p&gt;http://ceph.com/docs/next/cephfs/troubleshooting/&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://ldming.github.io/jekyll/2011/12/29/jekyll-introduction"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>http://ldming.github.io/jekyll/2011/12/29/jekyll-introduction</id>
   <content type="html">
&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we’ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as “a simple, blog aware, static site generator”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-does-jekyll-do&quot;&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-is-not-blogging-software&quot;&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id=&quot;why-should-i-care&quot;&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
  &lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
  &lt;li&gt;No internet connection required.&lt;/li&gt;
  &lt;li&gt;Ability to publish via git.&lt;/li&gt;
  &lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
  &lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
  &lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;how-jekyll-works&quot;&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you’ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id=&quot;the-jekyll-application-base-format&quot;&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;jekyll-configuration&quot;&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
(&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;content-in-jekyll&quot;&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content “objects” get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id=&quot;posts-and-pages&quot;&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id=&quot;working-with-posts&quot;&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post’s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy “set”.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy “lessons/beginner”. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won’t find “lessons” and “beginner” as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id=&quot;working-with-pages&quot;&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;templates-in-jekyll&quot;&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page’s or post’s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site’s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;sub-templates&quot;&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another “root” layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id=&quot;includes&quot;&gt;Includes&lt;/h3&gt;
&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id=&quot;using-liquid-for-templating&quot;&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id=&quot;what-is-liquid&quot;&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-have-to-use-liquid&quot;&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id=&quot;liquid-is-not-programmer-friendly&quot;&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can’t do jackshit in liquid that hasn’t been allowed explicitly by the implementation.
What’s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll’s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It’s really unnecessary
&lt;em&gt;from a programmer’s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I’ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-assets&quot;&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-parses-files&quot;&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id=&quot;formatting-files-for-parsing&quot;&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We’ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;defining-layouts-for-posts-and-templates-parsing&quot;&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you’d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id=&quot;how-jekyll-generates-the-final-static-files&quot;&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll’s job is to generate a static representation of your website.
The following is an outline of how that’s done:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
  Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
  Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
  big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
  At this stage your site is one big computed ruby object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
  Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
  Once the post is parsed and liquified inside the the proper layout structure, the layout itself is “liquified”.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
  hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are “rendered”, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you’ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
  &lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at []()
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you’d like.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
